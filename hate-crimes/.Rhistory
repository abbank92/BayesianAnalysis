par (mfrow = c(1,1), mar = c(2,5,5,3))
#try different summary statistics
T <- function(y) mean(y)
T_rep <- numeric(nreps)
for (i in 1:nreps) {
T_rep[i] <- T(y_replicated[i, 1:N])
}
hist(T_rep, breaks = 20)
abline(v = T(data$y), col = "red", lwd = 2, lty = 2)
abline(v = T(hate_crimes$avg_hatecrimes_per_100k_fbi), col = "red", lwd = 2, lty = 2)
par (mfrow = c(1,1), mar = c(2,5,5,3))
#try different summary statistics
T <- function(y) mean(y, na.rm = TRUE)
T_rep <- numeric(nreps)
for (i in 1:nreps) {
T_rep[i] <- T(y_replicated[i, 1:N])
}
hist(T_rep, breaks = 20)
abline(v = T(hate_crimes$avg_hatecrimes_per_100k_fbi), col = "red", lwd = 2, lty = 2)
T <- function(y) diff(range(y))
T_rep <- numeric(nreps)
for (i in 1:nreps) {
T_rep[i] <- T(y_replicated[i, 1:N])
}
hist(T_rep, breaks = 20)
abline(v = T(data$y), col = "red", lwd = 2, lty = 2)
abline(v = T(hate_crimes$avg_hatecrimes_per_100k_fbi), col = "red", lwd = 2, lty = 2)
range(hate_crimes$avg_hatecrimes_per_100k_fbi)
range(hate_crimes$avg_hatecrimes_per_100k_fbi, na.rm = TRUE)
T <- function(y) diff(range(y, na.rm = TRUE))
T_rep <- numeric(nreps)
for (i in 1:nreps) {
T_rep[i] <- T(y_replicated[i, 1:N])
}
hist(T_rep, breaks = 20)
abline(v = T(hate_crimes$avg_hatecrimes_per_100k_fbi), col = "red", lwd = 2, lty = 2)
par (mfrow = c(1,1), mar = c(2,5,5,3))
#try different summary statistics
T <- function(y) mean(y, na.rm = TRUE)
T_rep <- numeric(nreps)
for (i in 1:nreps) {
T_rep[i] <- T(y_replicated[i, 1:N])
}
hist(T_rep, breaks = 20, main = "Histogram of Mean")
abline(v = T(hate_crimes$avg_hatecrimes_per_100k_fbi), col = "red", lwd = 2, lty = 2)
T <- function(y) diff(range(y, na.rm = TRUE))
T_rep <- numeric(nreps)
for (i in 1:nreps) {
T_rep[i] <- T(y_replicated[i, 1:N])
}
hist(T_rep, breaks = 20, main = "Histogram of Range")
abline(v = T(hate_crimes$avg_hatecrimes_per_100k_fbi), col = "red", lwd = 2, lty = 2)
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$hate_crimes_per_100k_splc)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(0)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
all_samples2 <- rbind(out$chain1,out$chain2,out$chain3)
effectiveSize(out)
samplesSummary(all_s)
effectiveSize(all_samples2)
samplesSummary(all_samples2)
names(hate_crimes)
fit2 <- lm(hate_crimes_per_100k_splc ~ median_household_income + share_unemployed_seasonal + share_population_in_metro_areas + share_population_with_high_school_degree + share_non_citizen + share_white_poverty + gini_index + share_non_white + share_voters_voted_trump,
data = hate_crimes)
summary(fit2)
samplesSummary(all_samples2)
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$hate_crimes_per_100k_splc)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(10)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
all_samples2 <- rbind(out$chain1,out$chain2,out$chain3)
effectiveSize(all_samples2)
samplesSummary(all_samples2)
mean(hate_crimes$avg_hatecrimes_per_100k_fbi)
mean(hate_crimes$avg_hatecrimes_per_100k_fbi, na.rm = TRUE)
mean(hate_crimes$hate_crimes_per_100k_splc, na.rm = TRUE)
hate_crimes$hate_crimes_per_100k_splc*(365/10)
library(dplyr)
hate_crimes$hate_crimes_per_100k_splc*(365/10) %>% mean(na.rm = TRUE)
mean(hate_crimes$hate_crimes_per_100k_splc*(365/10))
mean(hate_crimes$hate_crimes_per_100k_splc*(365/10), na.rm = TRUE)
hate_crimes$avg_hatecrimes_per_100k_fbi - hate_crimes$hate_crimes_per_100k_splc*(366/10)
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$hate_crimes_per_100k_splc*(366/10) - hate_crimes$avg_hatecrimes_per_100k_fbi)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(10)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
all_samples2 <- rbind(out$chain1,out$chain2,out$chain3)
effectiveSize(all_samples3)
samplesSummary(all_samples3)
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$hate_crimes_per_100k_splc)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(10)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
all_samples2 <- rbind(out$chain1,out$chain2,out$chain3)
effectiveSize(all_samples2)
samplesSummary(all_samples2)
# b[1] = share_population_with_high_school_degree
# b[2] = share_non_citizen
# b[3] = share_white_poverty
# b[4] = gini_index
# b[5] = share_non_white
# b[6] = share_voters_voted_trump
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Now we use the same predictors to see which ones most effect the difference
# between 2010-2015 data and 2016 data
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$hate_crimes_per_100k_splc*(366/10) - hate_crimes$avg_hatecrimes_per_100k_fbi)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(10)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
all_samples3 <- rbind(out$chain1,out$chain2,out$chain3)
effectiveSize(all_samples3)
samplesSummary(all_samples3)
samplesSummary(all_samples)
# b[1] = share_population_with_high_school_degree
# b[2] = share_non_citizen
# b[3] = share_white_poverty
# b[4] = gini_index
# b[5] = share_non_white
# b[6] = share_voters_voted_trump
# b[1], b[4] only predictors with a 95% BCI all positive
Cmodel$resetData()
nreps <- 100
N <- length(hate_crimes$avg_hatecrimes_per_100k_fbi)
y_replicated <- array(NA, c(nreps, N))
for (i in 1:nreps) {
print(i)
ind <- sample(5000:10000, 1)
for (peram in colnames(all_samples)) {
Cmodel[[peram]] <- all_samples[ind, peram]
}
Cmodel$calculate() #propagates everything all the way down
Cmodel$simulate("y")
y_replicated[i, 1:N] <- Cmodel$y
}
#Visual Checks
par(mfrow = c(5,4), mai = rep(.2,4))
xlim <- c(-5, 17)
breaks <- seq(-5, 17, by=2)
hist(hate_crimes$avg_hatecrimes_per_100k_fbi, main="", xlim=xlim, breaks=breaks, xaxt="n", yaxt="n", border='blue')
for (i in 1:19) hist(y_replicated[i,], main = "", xlim = xlim, breaks = breaks, xaxt = "n", yaxt = "n")
setwd("~/Documents/STAT365/FinalProject/hate-crimes")
hate_crimes <- read.csv("hate_crimes2.csv")
X_data <- as.matrix(hate_crimes[,2:10])
names(hate_crimes)
library(nimble)
library(basicMCMCplots)
library(coda)
X_data3 <- as.matrix(hate_crimes[,c(5:10)])
# X_data3[,1] <- X_data3[,1] - mean(X_data3[,1])
# X_data3[,3] <- X_data3[,3] - mean(X_data3[,3])
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$avg_hatecrimes_per_100k_fbi)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(0)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
all_samples_bad <- rbind(out$chain1,out$chain2,out$chain3)
samplesPlot(scale(all_samples_bad), ind=260000:270000, file = "samplesPlotBad.pdf")
X_data3 <- as.matrix(hate_crimes[,c(5:10)])
X_data3[,1] <- X_data3[,1] - mean(X_data3[,1])
X_data3[,3] <- X_data3[,3] - mean(X_data3[,3])
X_data3[,4] <- X_data3[,4] - mean(X_data3[,4])
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$avg_hatecrimes_per_100k_fbi)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel, onlySlice = TRUE)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmcmc <- compiledList[[2]]
set.seed(0)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
#before I got this beautiful result,
#I was not getting convergence until I centered three covariants
#(centering the gini_index coefficient made the biggest difference)
gelman.diag(out)
all_samples <- rbind(out$chain1,out$chain2,out$chain3)
effectiveSize(all_samples)
samplesSummary(all_samples)
X_data3 <- as.matrix(hate_crimes[,c(5:10)])
# X_data3[,1] <- X_data3[,1] - mean(X_data3[,1])
# X_data3[,3] <- X_data3[,3] - mean(X_data3[,3])
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$avg_hatecrimes_per_100k_fbi)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(0)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
samplesSummary(all_samples)
T <- function(y) mean(y, na.rm = TRUE)
T_rep <- numeric(nreps)
for (i in 1:nreps) {
T_rep[i] <- T(y_replicated[i, 1:N])
}
hist(T_rep, breaks = 20, main = "Histogram of Mean")
abline(v = T(hate_crimes$avg_hatecrimes_per_100k_fbi), col = "red", lwd = 2, lty = 2)
T <- function(y) mean(y, na.rm = TRUE)
T_rep <- numeric(nreps)
for (i in 1:nreps) {
T_rep[i] <- T(y_replicated[i, 1:N])
}
hist(T_rep, breaks = 20, main = "Histogram of Mean")
abline(v = T(hate_crimes$avg_hatecrimes_per_100k_fbi), col = "red", lwd = 2, lty = 2)
T <- function(y) diff(range(y, na.rm = TRUE))
T_rep <- numeric(nreps)
for (i in 1:nreps) {
T_rep[i] <- T(y_replicated[i, 1:N])
}
hist(T_rep, breaks = 20, main = "Histogram of Range")
abline(v = T(hate_crimes$avg_hatecrimes_per_100k_fbi), col = "red", lwd = 2, lty = 2)
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$hate_crimes_per_100k_splc)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(10)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
all_samples2 <- rbind(out$chain1,out$chain2,out$chain3)
effectiveSize(all_samples2)
samplesSummary(all_samples2)
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$hate_crimes_per_100k_splc)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(10)
out <- runMCMC(Cmcmc, niter = 1000000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
all_samples2 <- rbind(out$chain1,out$chain2,out$chain3)
effectiveSize(all_samples2)
samplesSummary(all_samples2)
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 + sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$hate_crimes_per_100k_splc*(366/10) - hate_crimes$avg_hatecrimes_per_100k_fbi)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmodel <- compiledList[[1]]
Cmcmc <- compiledList[[2]]
set.seed(10)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
set.seed(10)
out <- runMCMC(Cmcmc, niter = 1000000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
gelman.diag(out)
all_samples3 <- rbind(out$chain1,out$chain2,out$chain3)
samplesSummary(all_samples3)
samplesSummary(all_samples2)
X_data3 <- as.matrix(hate_crimes[,c(5:10)])
X_data3[,1] <- X_data3[,1] - mean(X_data3[,1])
X_data3[,3] <- X_data3[,3] - mean(X_data3[,3])
X_data3[,4] <- X_data3[,4] - mean(X_data3[,4])
code <- nimbleCode({
b0 ~ dnorm(0, sd=10000)
for (i in 1:N_predictors) {
b[i] ~ dnorm(0, sd=10000)
}
sigma_obs ~ dunif(0, 10000)
for (i in 1:N_rows) {
log(mu[i]) <- b0 +
sum(b[1:N_predictors] * X_data[i,1:N_predictors])
y[i] ~ dnorm(mu[i], sd=sigma_obs)
}
})
constants <- list(N_predictors = ncol(X_data3),
N_rows = nrow(hate_crimes),
X_data = X_data3)
data <- list(y = hate_crimes$avg_hatecrimes_per_100k_fbi)
inits <- list(b0 = 0, b = rep(0,ncol(X_data3)),
sigma_obs = 1)
Rmodel <- nimbleModel(code, constants, data, inits)
conf <- configureMCMC(Rmodel, onlySlice = TRUE)
Rmcmc <- buildMCMC(conf)
compiledList <- compileNimble(list(Rmodel, Rmcmc))
Cmcmc <- compiledList[[2]]
set.seed(0)
out <- runMCMC(Cmcmc, niter = 100000, nburnin = 10000, nchains = 3,
samplesAsCodaMCMC = TRUE)
#before I got this beautiful result,
#I was not getting convergence until I centered three covariants
#(centering the gini_index coefficient made the biggest difference)
gelman.diag(out)
all_samples <- rbind(out$chain1,out$chain2,out$chain3)
effectiveSize(all_samples)
